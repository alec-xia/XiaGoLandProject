GoLand File Indexing Project
By: Alec Xia

Description (from spec): This Java application provides a service for indexing text files.
The console interface allows for (i) specifying the indexed files and directories and
                                 (ii) querying files containing a given word.
The library is extensible by the tokenization algorithm (simple splitting by words/support lexers/etc.).

USER COMMANDS:
    indexBy arg1
        arg1 options: size sizeDescending name nameDescending
    Sorts and indexes files in CWD by arg1

    display
        no arguments
        Prints indexed files

    specifyFile arg1
        arg1: [file name]
        Prints properties of file

    specifyByIndex arg1
        arg1: [index of file] (requires indexBy to be ran first)
        Prints properties of file

    tokenize
        no arguments
        Tokenizes all text files in CWD

    search arg1
        arg1: [keyword] (requires tokenize to be ran first)
        Searches for arg1 in all tokenized files

    appears arg1 arg2
        arg1: [file name]
        arg2: [keyword]
        Prints the number of appearances of keyword in file

Classes:
Main.java
    Contains methods that perform all the possible user commands.
PersistedSort.java
    Contains library of indexed files. The reason why I created a new class to store this rather
    than just serializing an ArrayList is to allow for future updates. It makes it easier if I want
    to eventually add more functionality to this application -- just modify the class to add more data structures.

Indexing methods:

display:
    Prints all files under CWD along with its index.
    Time Complexity: O(n) where n is the number of files.
indexSort:
    Takes in a keyword, and sorts the files in CWD by the named method.
    Currently, I allow for the user to sort by name and size, but other comparisons can be easily added.
    Time Complexity: O(n*logn)
specifyFile:
    Prints out file properties for file with specified name.
    Time Complexity: O(n)
specifyByIndex:
    Prints out file properties for the ith file that was previously indexed.
    Time Complexity: O(1)

Searching methods:

tokenizeAll:
    Applies tokenizeFile to all files in CWD. Then, stores serialized TreeMaps in .tokens.
    tokenizeFile takes a file and returns a TreeMap of key: word in file, value: number of appearances.
    Time Complexity: O(n * m) where m is the number of words per text file.
search:
    Searches through files in CWD and prints names of the files containing keyword.
    Time Complexity: O(n)
appears:
    Prints the number of times word appears in fileName.
    Time Complexity: O(1)

Functionality:
    This application supports all 3 required criteria:
    (i) specifying the indexed files and directories.
            Indexes all files, then allows user to see properties of files.
    (ii) querying files containing a given word.
            Searches for files with a keyword, also tracks number of appearances of keyword.
    (iii) extensible by the tokenization algorithm.
            Currently uses a very simple method tokenizeFile(), which splits file by common
            delimiters. Can easily support any tokenization algorithm by replacing tokenizeFile().

    NOTE: Even though persistence is not necessary, I believe it heavily increases the performance of the aplpication.
          1. Tokens do not have to be recreated every run.
          2. Allows for constant time look up for many methods.

Testing:
    Unit tests check for edge cases in my tokenization algorithm.
    Integration tests were performed in both Testing and Articles folders.
        Testing has files that catch edge cases like Berkeley vs. Berkeley1.
        Articles are taken from recent news articles from CNN to test on larger text files.

Limitations:
I don't consider files with duplicate names. This is a problem if I want to tokenize files with different contents
but same name. Then, two tokenized files will be saved under the same name. To solve this, I would probably name the files
by the hash of their contents, rather than their file name. To search up the file, I would take the user inputed name, hash it,
then locate it in my persisted folder.

Specifications only show name and size. However, this is very easily upgradable, add code that prints out other properties
of a specified file.

Filtering out non-text files was a little tricky and may produce some bugs in edge cases I did not test.
For common file types, this application should not run into any problems.